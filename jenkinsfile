pipeline {

  agent any

    stages {

	stage('Checkout Stage from GitHub'){
            steps{
                echo "Pipeline Started Successfully"
		checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'b6166a24-55a9-4fec-bcd4-5ff8a46f08b1', url: 'https://github.com/Amardeep51/calculator_flask.git']]])
                bat 'python calculator.py'
                echo "Compilation done successfully!"
            	}
           }

        
        stage('Testing Stage'){
            steps{
                echo "Entered Testing Stage"
                bat 'python test_calculator.py'
                echo "Unit Test done successfully!"
		echo "Entered Confirmation Stage"
                bat 'python run_tests.py'
                echo "That is the result of testing"
            	}
           }


        stage('Building Docker Image'){
            steps{
                echo "Building Docker Image"
                bat 'docker image build -t calculator_flask .'
                echo "Image Built Successfully"
            	}
             }

        stage('Running Docker Image'){
                    steps{
			echo "Stopping Previous Containers"
                        powershell 'docker stop $(docker ps -a -q)'
                        powershell 'docker rm $(docker ps -q -f status=exited)'
                        echo "Previous Containers Stopped"
                        echo "Runningg Docker Image"
                        bat 'docker run -p 5000:5000 -d calculator_flask'
                        echo "Image Ran Successfully"
                    	}
                 }


        stage ('Deploying to DockerHub'){
            steps{
                bat 'docker login -u amardeep51 -p ab11edf8-1a03-40cb-8fd2-a7e5df5a9877'
                echo "Logged in"
		bat 'docker tag calculator_flask:latest amardeep51/calculator_flask:myfirstimage'
                bat 'docker push amardeep51/calculator_flask:myfirstimage'
                echo "Image pushed successfully"
		echo "Removing Untagged Images"
                powershell 'docker images -f "dangling=true"'
                powershell 'docker rmi $(docker images -f "dangling=true" -q) --force'
                echo "Untagged Images Removed"
		echo "Pipeline Terminated"
            	}
          }
      
    }
}
